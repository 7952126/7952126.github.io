<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concise 的博客</title>
    <link>http://huangshanqing.buzz/</link>
    <description>Recent content on concise 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 20 May 2020 14:53:38 +0800</lastBuildDate>
    
	<atom:link href="http://huangshanqing.buzz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第八篇博客</title>
      <link>http://huangshanqing.buzz/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 20 May 2020 14:53:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>数据库实战，SQL 语言 数据库实战  数据库的类型   int/bigint 整数类型 varchar(100)/TEXT 字符串类型 timestamp 时间类型  JDBC Java Database Connection 安装其他客户端 JDBC SQL client  SQL 语言  DDL 用得少，一般一次写好就不动了  用户表  感觉我这里的 idea 没有 database 啊，我先看着吧 无论要用数据库做什么，都要新建一个用户表   create table user（id bigint xxx） id 不可以重复，但名字可以重复  基本 SQL  insert into 增 delete from 删 要加个 where ：delete from user where id=1；   要搞清楚物理删除和逻辑删除，物理删除就是数据从数据库中被抹去了。逻辑删除就是数据还在数据库中，我们假装看不见。 逻辑删除：update user set status = 0 where：id =2（一定要加这个 where）  update 改   update user set status = 0， UPDATE_AT = now() where id = 2  select 查,比较复杂的   select * from USER where ID&amp;gt;0 在两张表中把自己想要的东西全部筛出来：  其他重要知识：   SQL 语句不区分大小写 命名风格是下划线分割两个单词  SQL 注入：因为 sql 命令没有验证传入的参数，导致攻击者可以通过精心设计的参数是的拼装出的 SQL 达到他的目的（以假乱真）   防范 sql 注入：不会使用 statement，太危险了，而会使用 PreparedStatement，把参数先用问号代替，需要用的时候再把参数传进去。  </description>
    </item>
    
    <item>
      <title>第七篇博客</title>
      <link>http://huangshanqing.buzz/posts/io%E7%9A%84%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Sun, 17 May 2020 21:39:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/io%E7%9A%84%E5%BC%82%E5%B8%B8/</guid>
      <description>IOException 是个很烦人的东西  方法的入口一般是参数，出口一般是 returnXXX。异常是给方法的另外一个出口 其实 IDE 会自动帮忙解决的，不过还是要明白什么意思  JAVA 的异常体系（回来看）  catch （exception）这种语句一般叫做错误处理。  异常相关的内容  throw 和 throws，前者是抛出一个异常，后者只是一个声明 如果调用了一个可能丢出异常的方法，要么自己也扔出一个异常要么用 try，catch 把这个异常给抓住。 throwable，exception 有毒的，是要被抛出来的异常。 runtimeException 是无毒的，是运行时的异常 error 是有毒的   有毒无毒的意思：有毒就是沾上了就要抛异常，无毒就不用。  异常和 error 的区别  异常的栈轨迹  什么是栈轨迹：就是错误里面的 rog.xxx 什么什么的  异常的处理方法  是不是有能力处理这个异常 本方法的异常归不归自己管 如非万不得已，不要忽略异常 尽量使用 JDK 的内置异常  </description>
    </item>
    
    <item>
      <title>第六篇博客</title>
      <link>http://huangshanqing.buzz/posts/java%E7%9A%84io/</link>
      <pubDate>Sat, 09 May 2020 11:50:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/java%E7%9A%84io/</guid>
      <description>计算机多级系统 file 与 IO（Input and Output）  cpu，内存以及硬盘：在 cpu 看来，一切硬件的速度都很慢 文件的本质：字节流 字节流：无论是读还是写，都是一个一个字节进行的，看起来就像一条河流   http 协议也是这样，你向服务器发送字节流，服务器返回给你的也是字节流  读取的时候尽量使用绝对路径 file 指的是文件路径 绝对路径：王小明的爸爸；相对路径：爸爸（这个爸爸只有在特定的地方才生效，比如家里）  NIO  在 java 中如果一个名字代表一个类，那加一个 s 就代表相应的工具包  </description>
    </item>
    
    <item>
      <title>第四篇博客</title>
      <link>http://huangshanqing.buzz/posts/web%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 27 Apr 2020 14:53:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/web%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>Web 前后端基础架构 计算机网络是如何工作的 在打开⽹⻚的时候发⽣了什么   主机：很多互相连接的计算机。
  IP （Internet Protocol）地址：每个主机都有一个地址，它是 32 位的，连接在一起就是一个 IP 地址，它可以唯一的定位到一台主机。IP 地址非常难记，因此，DNS 运营而生。
  DNS：全称是 Domain Name Service （域名服务），它将域名转化为了 IP 地址。
  端口（Port）：电脑上可以开很多程序，但网线只有一根，数据就是通过端口来知道自己的归属地的。
   一个电脑有非常多的端口，每个数据包都会被分配到指定的端口。 https:// 协议的默认端口是 443，http:// 协议的默认端口是 80，http:// 协议在 TCP 协议之上。   TCP 协议：一条从本地通往远程主机的双向的数据通道（基于流的协议：第一个数据会先到达，然后是第二个第三个），双方都可以同时发送和接受数据（又叫全双工协议就像打电话，与之相对的还有半双工协议
  HTTP 协议：发送请求（HTTP request）后，主机会对请求进行 HTTP 响应（HTTP response）
   发送的时候一定是以 GET 开头的，响应则是以 HTTP 开头。 HTTP 响应成功之后，会得到一个状态码（例如：200 OK）。 状态发送成功的话，状态码后面会有 HEADER，里面有一些基本信息（例如：date 等）。HTTP 响应+状态码+HEADER 共同组成了 HTTP 响应头，响应头后面是响应体，他们用分隔符来分隔。  浏览器是如何工作的   浏览器看到&amp;lt;html&amp;hellip;&amp;gt;，就会开始解析。</description>
    </item>
    
    <item>
      <title>第三篇博客</title>
      <link>http://huangshanqing.buzz/posts/collection%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Tue, 21 Apr 2020 21:39:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/collection%E4%BD%93%E7%B3%BB/</guid>
      <description>Collection 体系 Collection 是什么   Collection 可以看作一个接口，类似多态，是不能被实例化的（new Collection）。
  可以将它具体化的理解为：一篮子鸡蛋，一个队列的人等。它只包含一种元素。
  作用：批量操作成千上万的数据。
  Collection 体系有两个很重要的接口：Set，List。
  List/Set 约定  List   List 是个有序的集合，是一个个有顺序的元素，可以拓展 Collection 体系。 List 有一些其他方法，比如 get，可获取指定位置的元素。 List 中有 n 个元素的时候，会将第一个元素约定为第 0 个，最后一个元素就是第 n-1 个。 在 list 上加个泛型 list&amp;lt;&amp;gt;，它就会变成一个有类型的 list。  ArrayList 基于数组的 list。  ArrayList 是需要给定初始容量的。 动态扩容：每当发现 list 放不下的时候，就通过算法来扩容  Set   set 是个无序且不允许出现重复的集合(判断方法：equals)。  linkedHashSet 和 HashSet 和 TreeSet   HashSet 的顺序是完全随机的</description>
    </item>
    
    <item>
      <title>第二篇博客</title>
      <link>http://huangshanqing.buzz/posts/maven%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 21 Apr 2020 21:39:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/maven%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>Maven 的包的基本特征   Convention over configuration（约定优于配置） 虽然 maven 不强制所有人按照约定管理代码，但基本上所有人都这么做。
  maven 给所有的包都添加了三个属性：groupID , artifactID , version 。需要某个包的时候，只需要按这三个属性检索即可，极大地提高了效率。
  通常而言在 google 搜索这三个属性并加上 maven 即可。将 mvn 官网提供的链接复制到 idea 后，需要刷新一下 mvn。
  maven 库中的包一经提交，不可更改，只能升级。
  maven 的中央仓库和本地仓库  中央仓库在远端的服务器上 maven 自动将需要的仓库从中央仓库中下载到本地仓库中  maven 的包冲突   全限定类名是类的唯一标识，因此当多个同名的类出现在同一 Classpath 中，就会导致包冲突。如果出现了这种情况，JVM 会自动选择离项目距离最近的那个，这可能会导致一些错误发生。
  mvn 绝对不允许 Classpath 出现两个同名不同类的包。mvn 知道它们冲突是因为它们的 groupID 和 artifactID 一样但是版本不一样
  maven dependency：tree 用来看当前的依赖树。展示之前会自动解决掉冲突的包并去掉。真实项目中的 tree 会非常的长。</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>http://huangshanqing.buzz/posts/%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 19 Apr 2020 11:50:38 +0800</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>如何使用 hugo 搭建个人博客 How to make personal blog via hugo （for Win users）
 用 hugo 搭建博客的第一步，就是学习使用 Markdown 语法，这个语法非常简单，很快就能上手。   Before you create your blog，you need to learn how to use markdown. It‘s very easy.  安装 hugo install hugo
 https://github.com/gohugoio/hugo/releases ，找到 hugo_XXX_Windows 64bit.zip，我选择了大约 40M 的那个。下载并放到 D 盘的 Software 路径下，具体格式为 D:\Software\hugo\hugo.exe ;若没有此路径可以自行创建。   you need to open the link and find a document names hugo_XXX_Windows 64bit.zip and download.</description>
    </item>
    
    <item>
      <title>第五篇博客</title>
      <link>http://huangshanqing.buzz/posts/http%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://huangshanqing.buzz/posts/http%E5%9F%BA%E7%A1%80/</guid>
      <description>http 入门详解 复习  http 是互联网中所有的东西的基石 http 最重要的两种方法：get ，post  http status  就是 404，,200 之类的，具体需要的时候再去百度吧  HTTP 方法  get 方法：想要拿到的东西（请求一个网页） get 请求的数据全部都放在 HTTP request 的 header 中。 post 方法：想要推送的东西（登录） post 方法真正的数据是放在 body 里面的；登录接口一定要用 post 去发起。 http 状态  反爬虫手段  直接拒绝（401/404） 在返回的数据中“投毒”，返回错误的数据。  127.0.0.1 指向本地 码
 可爱的 http.cat 喵喵喵 返回 6 开头的状态码就可以骂后端了(可是好像后端是我诶)  body  哎哎哎哎哎哎（postman 好像是个很不错的工具）  http header  referer ：用来做防盗的，比如去 csdn 黏贴代码的时候就会有一个本代码来自 xxx 禁止二传 cookie：为什么服务器能够认识我们（打开淘宝不会显示别人的购物车）。   http 协议是无状态的  http body  encodeURI：输入的东西不是标准的，就会被转译。http 上传输的字符是有限范围内的。  最后附上自己写的代码 package com.</description>
    </item>
    
  </channel>
</rss>